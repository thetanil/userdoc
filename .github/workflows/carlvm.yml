name: carlvm-build

on:
  push:
    branches:
      - main

env:
  SRCDIR: carlvm/src
  BUILDDIR: build/carlvm
  CACHEDIR: build/cache
  KERNELVER: 6.6.58
  ALPINEVER: 3.20.3

jobs:
  # install_deps:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Install dependencies
  #       run: |
  #         if grep -q '^ID=ubuntu$' /etc/os-release; then
  #           if ! which musl-gcc; then
  #             sudo apt-get update && sudo apt-get install -y musl-tools
  #           fi
  #           if ! which qemu-system-x86_64; then
  #             sudo apt-get update && sudo apt-get install -y qemu-system-x86
  #           fi
  #           if ! which curl; then
  #             sudo apt-get update && sudo apt-get install -y curl
  #           fi
  #           if ! which strip; then
  #             sudo apt-get update && sudo apt-get install -y binutils
  #           fi
  #           if ! which gcc; then
  #             sudo apt-get update && sudo apt-get install -y gcc make build-essential perl dkms
  #           fi
  #           if dpkg-query -W -f='${Status}' libelf-dev 2>/dev/null | grep -q "install ok installed"; then
  #             echo "libelf-dev is installed"
  #           else
  #             sudo apt-get update && sudo apt-get install -y libelf-dev perl dkms
  #           fi
  #         else
  #           echo "add your package installer commands here"
  #           exit 1
  #         fi

  build_dumb_init:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: musl-gcc compile and strip
        run: |
          # TODO NOT LIKE THIS
          if ! which musl-gcc; then
            sudo apt-get update && sudo apt-get install -y musl-tools
          fi
          mkdir -p "${BUILDDIR}/dumb-init"
          musl-gcc -O2 "${SRCDIR}/dumb-init/dumb-init.c" -o "${BUILDDIR}/dumb-init/dumb-init"
          strip --strip-all "${BUILDDIR}/dumb-init/dumb-init"

      - name: Upload dumb-init artifact
        uses: actions/upload-artifact@v4
        with:
          name: dumb-init
          path: "${{ env.BUILDDIR }}/dumb-init/dumb-init"

  build_dumb_exit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: musl-gcc compile and strip
        run: |
          # TODO NOT LIKE THIS
          if ! which musl-gcc; then
            sudo apt-get update && sudo apt-get install -y musl-tools
          fi
          mkdir -pv "${BUILDDIR}/dumb-exit"
          musl-gcc -O2 "${SRCDIR}/dumb-exit/dumb-exit.c" -o "${BUILDDIR}/dumb-exit/dumb-exit"
          strip --strip-all "${BUILDDIR}/dumb-exit/dumb-exit"

      - name: Upload dumb-exit artifact
        uses: actions/upload-artifact@v4
        with:
          name: dumb-exit
          path: "${{ env.BUILDDIR }}/dumb-exit/dumb-exit"

  build_kernel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: download kernel source
        run: |
          mkdir -pv "${CACHEDIR}"
          if [ ! -f "${CACHEDIR}/linux-${KERNELVER}.tar.xz" ]; then
            curl -o "${CACHEDIR}/linux-${KERNELVER}.tar.xz" "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNELVER}.tar.xz"
          fi

      - name: extract and copy kernel config
        run: |
          tar xf "${CACHEDIR}/linux-${KERNELVER}.tar.xz" -C "${CACHEDIR}"
          echo "Kernel source is available at ${CACHEDIR}/linux-${KERNELVER}"
          du -sh "${CACHEDIR}/linux-${KERNELVER}"
          cp "${SRCDIR}/qemu-kernel-config" "${CACHEDIR}/linux-${KERNELVER}/.config"

      - name: Build kernel
        run: |
          # TODO NOT LIKE THIS
          if ! which gcc; then
            sudo apt-get update && sudo apt-get install -y gcc make build-essential perl dkms
          fi
          if dpkg-query -W -f='${Status}' libelf-dev 2>/dev/null | grep -q "install ok installed"; then
            echo "libelf-dev is installed"
          else
            sudo apt-get update && sudo apt-get install -y libelf-dev perl dkms
          fi
          cd "${CACHEDIR}/linux-${KERNELVER}"
          make -j$(nproc) bzImage
          ls -la arch/x86/boot/bzImage

      - name: Upload kernel artifact
        uses: actions/upload-artifact@v4
        with:
          name: bzImage
          path: "${{ env.CACHEDIR }}/linux-${{ env.KERNELVER }}/arch/x86/boot/bzImage"

  build_alpine_rootfs:
    runs-on: ubuntu-latest
    needs: [build_dumb_init, build_dumb_exit]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download alpine rootfs
        run: |
          mkdir -pv "${CACHEDIR}"
          if [ ! -f "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64.tar.gz" ]; then
            curl -o "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64.tar.gz" "https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/alpine-minirootfs-${ALPINEVER}-x86_64.tar.gz"
          fi

      - name: prep directory
        run: |
          if [ -d "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64" ]; then
            rm -rf "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64"
          fi
          mkdir -p "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64"
          tar xf "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64.tar.gz" -C "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64"
          touch "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64/prep"
          ls -la "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64"
          echo "Alpine rootfs is available at ${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64"
          du -sh "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64"

      - name: download dumb-init
        uses: actions/download-artifact@v4
        with:
          name: dumb-init
          path: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64/dumb-init"

      - name: download dumb-exit
        uses: actions/download-artifact@v4
        with:
          name: dumb-exit
          path: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64/dumb-exit"

      - name: ls alpine-minirootfs
        run: ls -la "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64"

      - name: Prepare rootfs
        run: |
          chmod +x "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64/dumb-init"
          chmod +x "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64/dumb-exit"
          cp "${SRCDIR}/overlay/init" "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64/init"
          chmod +x "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64/init"
          find "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64" | cpio -o -H newc > "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64.cpio"

      - name: ls CACHEDIR
        run: ls -la "${CACHEDIR}"

      - name: Upload alpine rootfs artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpine-minirootfs
          path: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64.cpio"

  carlvm-build:
    runs-on: ubuntu-latest
    needs: [build_kernel, build_alpine_rootfs]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log environment variables
        run: |
          echo "BUILDDIR: ${BUILDDIR}"
          echo "CACHEDIR: ${CACHEDIR}"
          echo "KERNELVER: ${KERNELVER}"
          echo "ALPINEVER: ${ALPINEVER}"

      - name: download kernel artifact
        uses: actions/download-artifact@v4
        with:
          name: bzImage
          path: "${{ env.CACHEDIR }}/carlvm"

      - name: ls kernel artifact
        run: ls -la "${CACHEDIR}/carlvm"

      - name: download alpine rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: alpine-minirootfs
          path: "${{ env.CACHEDIR }}/carlvm"

      - name: ls alpine rootfs artifact
        run: ls -la "${CACHEDIR}/carlvm"

      - name: copy zip dir to build dir
        run: |
          pwd
          echo "CACHEDIR: ${CACHEDIR}"
          if [ -d "carlvm/zip" ]; then
            ls -lha carlvm/zip
            cp -a carlvm/zip/. "${CACHEDIR}/carlvm/"
          else
            echo "Directory carlvm/zip does not exist."
            exit 1
          fi
          ls -la "${CACHEDIR}/carlvm"

      - name: ls carlvm
        run: ls -la "${CACHEDIR}/carlvm"

      - name: show local artifacts
        run: |
          if [ -d /tmp/act_artifacts/1/carlvm ]; then
            rm -rf /tmp/act_artifacts/1/carlvm
          else 
            echo "no tmp artifacts on gh runner"
          fi

      - name: Upload carlvm artifact
        uses: actions/upload-artifact@v4
        with:
          name: carlvm
          path: "${{ env.CACHEDIR }}/carlvm"

      - name: show local artifacts
        run: |
          if [ -d /tmp/act_artifacts/1/carlvm ]; then
            find /tmp/act_artifacts/1/carlvm -type f
          else 
            echo "no tmp artifacts on gh runner"
          fi
