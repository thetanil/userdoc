name: CI
on:
  - pull_request
  - push

jobs:
  test-ubuntu:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Install qemu-utils
        run: |
          sudo apt-get update
          sudo apt-get install qemu-utils

      - uses: actions/checkout@v3

      #     - name: Build image for x86_64 with BIOS mode and without GPT
      #       run: |
      #         sudo ./alpine-make-vm-image \
      #             --image-format qcow2 \
      #             --image-size 2G \
      #             --repositories-file example/repositories \
      #             --packages "$(cat example/packages)" \
      #             --fs-skel-dir example/rootfs \
      #             --fs-skel-chown root:root \
      #             --script-chroot \
      #             alpine-bios-$(date +%Y-%m-%d).qcow2 -- ./example/configure.sh

      #     - name: Build image for x86_64 with BIOS mode and GPT
      #       run: |
      #         sudo ./alpine-make-vm-image \
      #             --image-format raw \
      #             --image-size 2G \
      #             --partition \
      #             --repositories-file example/repositories \
      #             --packages "$(cat example/packages)" \
      #             --fs-skel-dir example/rootfs \
      #             --fs-skel-chown root:root \
      #             --script-chroot \
      #             alpine-bios-part-$(date +%Y-%m-%d).raw -- ./example/configure.sh

      - name: Build image for x86_64 with UEFI mode
        run: |
          cd bin/alpine-make-vm-image && \
          ls && \
          pwd && \
          chmod +x alpine-make-vm-image && \
          sudo ./alpine-make-vm-image \
              --image-format qcow2 \
              --image-size 2G \
              --boot-mode UEFI \
              --repositories-file example/repositories \
              --packages "$(cat example/packages)" \
              --fs-skel-dir example/rootfs \
              --fs-skel-chown root:root \
              --script-chroot \
              alpine-uefi-$(date +%Y-%m-%d).qcow2 -- ./example/configure.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: alpine-uefi-$(date +%Y-%m-%d).qcow2
          path: alpine-uefi-$(date +%Y-%m-%d).qcow2

  #     - name: Install qemu-aarch64 and register in binfmt
  #       uses: jirutka/setup-alpine@v1
  #       with:
  #         arch: aarch64

  #     - name: Build image for aarch64
  #       run: |
  #         sudo ./alpine-make-vm-image \
  #             --arch aarch64 \
  #             --image-format qcow2 \
  #             --image-size 2G \
  #             --repositories-file example/repositories \
  #             --packages "$(cat example/packages) linux-virt@edge" \
  #             --fs-skel-dir example/rootfs \
  #             --fs-skel-chown root:root \
  #             --script-chroot \
  #             alpine-aarch64-$(date +%Y-%m-%d).qcow2 -- ./example/configure.sh

  # test-alpine:
  #   name: Test on Alpine
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     # We must run this outside the chroot.
  #     - run: sudo modprobe nbd max_part=16

  #     - name: Set up latest Alpine Linux
  #       uses: jirutka/setup-alpine@v1

  #     - name: Build image for x86_64 with BIOS mode and without GPT
  #       run: |
  #         ./alpine-make-vm-image \
  #             --image-format qcow2 \
  #             --image-size 2G \
  #             --repositories-file example/repositories \
  #             --packages "$(cat example/packages)" \
  #             --fs-skel-dir example/rootfs \
  #             --fs-skel-chown root:root \
  #             --script-chroot \
  #             alpine-bios-$(date +%Y-%m-%d).qcow2 -- ./example/configure.sh
  #       shell: alpine.sh --root {0}

  #     - name: Build image for x86_64 with UEFI mode
  #       run: |
  #         ./alpine-make-vm-image \
  #             --image-format qcow2 \
  #             --image-size 2G \
  #             --boot-mode UEFI \
  #             --repositories-file example/repositories \
  #             --packages "$(cat example/packages)" \
  #             --fs-skel-dir example/rootfs \
  #             --fs-skel-chown root:root \
  #             --script-chroot \
  #             alpine-uefi-$(date +%Y-%m-%d).qcow2 -- ./example/configure.sh
  #       shell: alpine.sh --root {0}

  #     - name: Install qemu-aarch64 and register in binfmt
  #       uses: jirutka/setup-alpine@v1
  #       with:
  #         arch: aarch64
  #         shell-name: alpine-aarch64.sh

  #     # Note: We cannot run alpine-make-vm-image inside emulated chroot due to nbd.
  #     - name: Build image for aarch64
  #       run: |
  #         ./alpine-make-vm-image \
  #             --arch aarch64 \
  #             --branch edge \
  #             --image-format qcow2 \
  #             --image-size 2G \
  #             --packages "$(cat example/packages)" \
  #             --fs-skel-dir example/rootfs \
  #             --fs-skel-chown root:root \
  #             --script-chroot \
  #             alpine-aarch64-$(date +%Y-%m-%d).qcow2 -- ./example/configure.sh
  #       shell: alpine.sh --root {0}

  # setup-cache:
  #   name: Cache
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Cache
  #       uses: actions/cache@v4.1.2
  #       with:
  #         # A list of files, directories, and wildcard patterns to cache and restore
  #         path:
  #         # An explicit key for restoring and saving the cache
  #         key:
  #         # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
  #         restore-keys: # optional
  #         # The chunk size used to split up large files during upload, in bytes
  #         upload-chunk-size: # optional
  #         # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
  #         enableCrossOsArchive: # optional, default is false
  #         # Fail the workflow if cache entry is not found
  #         fail-on-cache-miss: # optional, default is false
  #         # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
  #         lookup-only: # optional, default is false
  #         # Run the post step to save the cache even if another step before fails
  #         save-always: # optional, default is false
