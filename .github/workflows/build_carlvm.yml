name: build-carlvm

on:
  workflow_call:
    # inputs:
    #   build_dumb_init:
    #     type: boolean
    #     description: "Build dumb-init"
    #     required: false
    #   build_dumb_exit:
    #     type: boolean
    #     description: "Build dumb-exit"
    #     required: false
    #   build_kernel:
    #     type: boolean
    #     description: "Build kernel"
    #     required: false
    #   build_alpine_rootfs:
    #     type: boolean
    #     description: "Build alpine rootfs"
    #     required: false
    #   carlvm-build:
    #     type: boolean
    #     description: "Build carlvm"
    #     required: false

env:
  SRCDIR: carlvm/src
  BUILDDIR: build/carlvm
  CACHEDIR: build/cache
  KERNELVER: 6.6.58
  ALPINEVER: 3.20.3

jobs:
  build_dumb_init:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: musl-gcc compile and strip
        run: |
          # TODO NOT LIKE THIS
          if ! which musl-gcc; then
            sudo apt-get update && sudo apt-get install -y musl-tools
          fi
          mkdir -p "${BUILDDIR}/dumb-init"
          musl-gcc -O2 "${SRCDIR}/dumb-init/dumb-init.c" -o "${BUILDDIR}/dumb-init/dumb-init"
          strip --strip-all "${BUILDDIR}/dumb-init/dumb-init"

      - name: Upload dumb-init artifact
        uses: actions/upload-artifact@v4
        with:
          name: dumb-init
          path: "${{ env.BUILDDIR }}/dumb-init/dumb-init"

  build_dumb_exit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: musl-gcc compile and strip
        run: |
          # TODO NOT LIKE THIS
          if ! which musl-gcc; then
            sudo apt-get update && sudo apt-get install -y musl-tools
          fi
          mkdir -pv "${BUILDDIR}/dumb-exit"
          musl-gcc -O2 "${SRCDIR}/dumb-exit/dumb-exit.c" -o "${BUILDDIR}/dumb-exit/dumb-exit"
          strip --strip-all "${BUILDDIR}/dumb-exit/dumb-exit"

      - name: Upload dumb-exit artifact
        uses: actions/upload-artifact@v4
        with:
          name: dumb-exit
          path: "${{ env.BUILDDIR }}/dumb-exit/dumb-exit"

  build_carl_exit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: musl-gcc compile and strip
        run: |
          # TODO NOT LIKE THIS
          if ! which musl-gcc; then
            sudo apt-get update && sudo apt-get install -y musl-tools
          fi
          if ! which nasm; then
            sudo apt-get update && sudo apt-get install -y nasm
          fi
          mkdir -pv "build/carl-exit"

      - name: build carl-exit
        working-directory: carlvm/src/carl-exit
        run: |
          nasm -felf64 carl-exit.asm -o carl-exit.o
          ld -z noseparate-code -s -static -nostdlib -o carl-exit carl-exit.o
          strip carl-exit

      - name: Upload carl-exit artifact
        uses: actions/upload-artifact@v4
        with:
          name: carl-exit
          path: carlvm/src/carl-exit/carl-exit

  build_kernel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: download kernel source
        run: |
          mkdir -pv "${CACHEDIR}"
          if [ ! -f "${CACHEDIR}/linux-${KERNELVER}.tar.xz" ]; then
            curl -o "${CACHEDIR}/linux-${KERNELVER}.tar.xz" "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNELVER}.tar.xz"
          fi

      - name: extract and copy kernel config
        run: |
          tar xf "${CACHEDIR}/linux-${KERNELVER}.tar.xz" -C "${CACHEDIR}"
          echo "Kernel source is available at ${CACHEDIR}/linux-${KERNELVER}"
          du -sh "${CACHEDIR}/linux-${KERNELVER}"
          cp "${SRCDIR}/qemu-kernel-config" "${CACHEDIR}/linux-${KERNELVER}/.config"

      - name: Build kernel
        run: |
          # TODO NOT LIKE THIS
          if ! which gcc; then
            sudo apt-get update && sudo apt-get install -y gcc make build-essential perl dkms
          fi
          if dpkg-query -W -f='${Status}' libelf-dev 2>/dev/null | grep -q "install ok installed"; then
            echo "libelf-dev is installed"
          else
            sudo apt-get update && sudo apt-get install -y libelf-dev perl dkms
          fi
          cd "${CACHEDIR}/linux-${KERNELVER}"
          make -j$(nproc) bzImage
          ls -la arch/x86/boot/bzImage

      - name: Upload kernel artifact
        uses: actions/upload-artifact@v4
        with:
          name: bzImage
          path: "${{ env.CACHEDIR }}/linux-${{ env.KERNELVER }}/arch/x86/boot/bzImage"

  build_alpine_rootfs:
    runs-on: ubuntu-latest
    needs: [build_dumb_init, build_dumb_exit, build_carl_exit]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download alpine rootfs
        run: |
          mkdir -pv "${CACHEDIR}"
          if [ ! -f "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64.tar.gz" ]; then
            curl -o "${CACHEDIR}/alpine-minirootfs-${ALPINEVER}-x86_64.tar.gz" "https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/alpine-minirootfs-${ALPINEVER}-x86_64.tar.gz"
          fi

      - name: prep directory
        working-directory: "${{ env.CACHEDIR }}"
        run: |
          if [ -d "alpine-minirootfs-${ALPINEVER}-x86_64" ]; then
            rm -rf "alpine-minirootfs-${ALPINEVER}-x86_64"
          fi
          mkdir -p "alpine-minirootfs-${ALPINEVER}-x86_64"
          tar xf "alpine-minirootfs-${ALPINEVER}-x86_64.tar.gz" -C "alpine-minirootfs-${ALPINEVER}-x86_64"
          du -sh "alpine-minirootfs-${ALPINEVER}-x86_64"

      - name: download dumb-init
        uses: actions/download-artifact@v4
        with:
          name: dumb-init
          path: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64"

      - name: download dumb-exit
        uses: actions/download-artifact@v4
        with:
          name: dumb-exit
          path: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64"

      - name: download carl-exit
        uses: actions/download-artifact@v4
        with:
          name: carl-exit
          path: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64"

      - name: ls alpine-minirootfs
        working-directory: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64"
        run: ls -la

      - name: Prepare rootfs
        working-directory: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64"
        run: |
          chmod +x ./dumb-init
          chmod +x ./dumb-exit
          chmod +x ./carl-exit
          cp "$GITHUB_WORKSPACE/${SRCDIR}/overlay/init" ./init
          chmod +x ./init

      - name: ls cpio content
        working-directory: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64"
        run: ls -la

      - name: cpio content
        working-directory: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64"
        run: find . | cpio -o -H newc > "../alpine-minirootfs-${ALPINEVER}-x86_64.cpio"

      - name: ls cpio file
        working-directory: "${{ env.CACHEDIR }}"
        run: ls -la

      - name: Upload alpine rootfs artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpine-minirootfs
          path: "${{ env.CACHEDIR }}/alpine-minirootfs-${{ env.ALPINEVER }}-x86_64.cpio"

  carlvm-build:
    runs-on: ubuntu-latest
    needs: [build_kernel, build_alpine_rootfs]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log environment variables
        run: |
          echo "BUILDDIR: ${BUILDDIR}"
          echo "CACHEDIR: ${CACHEDIR}"
          echo "KERNELVER: ${KERNELVER}"
          echo "ALPINEVER: ${ALPINEVER}"

      - name: download kernel artifact
        uses: actions/download-artifact@v4
        with:
          name: bzImage
          path: "${{ env.CACHEDIR }}/carlvm"

      - name: ls kernel artifact
        run: ls -la "${CACHEDIR}/carlvm"

      - name: download alpine rootfs artifact
        uses: actions/download-artifact@v4
        with:
          name: alpine-minirootfs
          path: "${{ env.CACHEDIR }}/carlvm"

      - name: ls alpine rootfs artifact
        run: ls -la "${CACHEDIR}/carlvm"

      - name: copy zip dir to build dir
        run: |
          pwd
          echo "CACHEDIR: ${CACHEDIR}"
          if [ -d "carlvm/zip" ]; then
            ls -lha carlvm/zip
            cp -a carlvm/zip/. "${CACHEDIR}/carlvm/"
          else
            echo "Directory carlvm/zip does not exist."
            exit 1
          fi
          ls -la "${CACHEDIR}/carlvm"

      - name: ls carlvm
        run: ls -la "${CACHEDIR}/carlvm"

      - name: show local artifacts
        run: |
          if [ -d /tmp/act_artifacts/1/carlvm ]; then
            rm -rf /tmp/act_artifacts/1/carlvm
          else 
            echo "no tmp artifacts on gh runner"
          fi

      - name: Upload carlvm artifact
        uses: actions/upload-artifact@v4
        with:
          name: carlvm
          path: "${{ env.CACHEDIR }}/carlvm"

      - name: show local artifacts
        run: |
          if [ -d /tmp/act_artifacts/1/carlvm ]; then
            find /tmp/act_artifacts/1/carlvm -type f
          else 
            echo "no tmp artifacts on gh runner"
          fi

  make_exec:
    runs-on: ubuntu-latest
    needs: [carlvm-build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: download carlvm artifact
        uses: actions/download-artifact@v4
        with:
          name: carlvm
          path: build/carlvm

      - name: ls carl.vm
        working-directory: build/carlvm
        run: |
          ls -la
          # exit 1

      - name: zip carlvm
        working-directory: ./build/carlvm
        run: |
          chmod +x execzip.sh
          chmod +x qrun.sh
          zip -r ../carlvm.zip .
          cp execzip.sh ../carl.vm
          cat ../carlvm.zip >> ../carl.vm
          chmod +x ../carl.vm

      - name: Upload carl.vm
        uses: actions/upload-artifact@v4
        with:
          name: carl.vm
          path: build/carl.vm

  # test_carlvm:
  #   runs-on: ubuntu-latest
  #   needs: [carlvm-build]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: download carlvm artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: carlvm

  #     - name: mount cpio
  #       run: |
  #         ls -la
