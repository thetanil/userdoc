# .github/workflows/pandoc_build.yml
name: pandoc-build

on:
  workflow_call:
    inputs:
      pandoc_version:
        description: "Version of Pandoc to install"
        required: true
        type: string
        default: "3.5"

jobs:
  ubuntu-package-deps:
    runs-on: local
    steps:
      - name: install ubuntu package deps
        run: |
          packages="g++ gcc libc6-dev libffi-dev libgmp-dev make xz-utils zlib1g-dev git gnupg netbase"
          missing_packages=""
          for package in $packages; do
            if ! dpkg -s "$package" >/dev/null 2>&1; then
                missing_packages="$missing_packages $package"
            fi
          done

          # If there are missing packages, install them
          if [ -n "$missing_packages" ]; then
              echo "Installing missing packages: $missing_packages"
              sudo apt-get update
              sudo apt-get install -y $missing_packages
          else
              echo "All packages are already installed."
          fi

  haskell-build-tools:
    runs-on: local

    steps:
      - name: Install Stack
        run: |
          [ -d /tmp/stack ] && exit 0
          mkdir /tmp/stack
          cd /tmp/stack
          wget https://get.haskellstack.org/stable/linux-x86_64.tar.gz
          tar -xzf linux-x86_64.tar.gz
          sudo mv stack-*/stack /usr/local/bin/
  download-pandoc-src:
    runs-on: local

    steps:
      - name: Download Pandoc
        run: |
          [ -d /tmp/pandoc ] && exit 0
          mkdir /tmp/pandoc
          cd /tmp/pandoc
          wget https://hackage.haskell.org/package/pandoc-${{ inputs.pandoc_version }}/pandoc-${{ inputs.pandoc_version }}.tar.gz
          tar -xzf pandoc-${{ inputs.pandoc_version }}.tar.gz
          cd pandoc-${{ inputs.pandoc_version }}

  build_pandoc:
    runs-on: local
    needs:
      - ubuntu-package-deps
      - haskell-build-tools
      - download-pandoc-src

    steps:
      - name: build pandoc
        run: |
          # only build if ~/.local/bin/pandoc is not available
          [ -f ~/.local/bin/pandoc ] && exit 0
          cd /tmp/pandoc/pandoc-${{ inputs.pandoc_version }}
          stack setup
          stack install pandoc-cli

  # verify:
  #   runs-on: local
  #   needs:
  #     - build_pandoc
  #   steps:
  #     - name: Build Pandoc server with Lua support
  #       run: |
  #         # Assuming you have a script or command to start Pandoc as a server with Lua support
  #         # Replace the following line with the actual command
  #         # pandoc --lua-filter=your-lua-filter.lua --server
  #         # check and skip if pandoc server is already running on port 3030
  #         if nc -z localhost 3030; then
  #           echo "pandoc server already running"
  #           exit 0
  #         else
  #           echo "starting pandoc server at http://localhost:3030"
  #           pandoc server &
  #         fi
